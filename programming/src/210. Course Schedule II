/**
There are a total of n courses you have to take labelled from 0 to n - 1.

Some courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.
**/

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        int[] indegree = new int[numCourses];

        // prepare initial data
        for(int[] pre : prerequisites) {
           List<Integer> ll = adj.getOrDefault(pre[1], new ArrayList<>());
           ll.add(pre[0]);
           indegree[pre[0]]++;
           adj.put(pre[1], ll);
        }

        //Add initial data to queue with indegree zero
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i] == 0) {
                queue.add(i);
            }
        }

        // process and prepare result in order of polling
        int count = 0;
        int[] result = new int[numCourses];
        while(!queue.isEmpty()) {
            int current = queue.poll();
            if(indegree[current] == 0){
                result[count] = current;
                count++;
            }
            if(!adj.containsKey(current)){
                continue;
            }
            List<Integer> nbrs = adj.get(current);
            for(Integer nbr : nbrs) {
                indegree[nbr]--;
                if(indegree[nbr] == 0) {
                    queue.add(nbr);
                }
            }
        }

        if(count != numCourses) {
            return new int[0];  // ***** empty ARRAY ******
        } else {
            return result;
        }

    }
}