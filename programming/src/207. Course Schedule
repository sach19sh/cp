/**
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 105
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.
**/


/**
Algo
- Create graph of given input/dependecies as directed graph
- Find if cycle using topological sort [find indegree, process all with zero indegree using queue]
- If not able to process all with this queue , that means there is cycle and indegree for all courses can't be reduced to zero.
https://www.youtube.com/watch?v=rG2-_lgcZzo

Eg 
[1,2] [2,3] [3,4] [3,5] 

4->3->2->1
5->3
      

**/
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
	    Map<Integer, List<Integer>> adj = new HashMap<>();
	    int[] indegree = new int[numCourses];

	    //prepare initial data
	    for(int[] pre : prerequisites) {
	        List<Integer> dep = adj.getOrDefault(pre[1], new ArrayList());
	        dep.add(pre[0]);
	        indegree[pre[0]]++;
	        adj.put(pre[1], dep);
	    }

	    // add all with indegree zero to queue
	    Queue<Integer> queue = new LinkedList<Integer>();
	    for(int i=0;i<numCourses;i++){
	        if(indegree[i] == 0){
	            queue.add(i);
	        }
	    }

	    //Now process until queue is empty or processed all items
	    int count = 0;
	    while(!queue.isEmpty()) {
	        int current = queue.poll();
	        if(indegree[current] == 0){
	            count++;
	        }
	        if(!adj.containsKey(current)){
	            continue;
	        }
	        List<Integer> nbrs = adj.get(current);
	        for(Integer nbr : nbrs) {
	            indegree[nbr]--;
	            if(indegree[nbr] == 0){
	                queue.add(nbr);
	            }
	        }
	    }

	    if(count != numCourses){
	        return false;
	    }
	    return true;
    }

}