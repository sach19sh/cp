/**
You are given an m x n integer matrix heights representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.

Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.

Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.

 https://assets.leetcode.com/uploads/2021/03/26/ocean-grid.jpg

Example 1:


Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Example 2:

Input: heights = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]
 

Constraints:

m == heights.length
n == heights[i].length
1 <= m, n <= 200
1 <= heights[i][j] <= 105
**/

class Solution {
    int[][] directions = new int[][]{
        {0,1},
        {1,0},
        {0,-1},
        {-1,0}
    };
    int row;
    int col;
    int[][] land;
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        if(heights.length == 0 || heights[0].length == 0) {
            return new ArrayList<>();
        }
        
        
        row = heights.length;
        col = heights[0].length;
        land = heights;
        
        Queue<int[]> pQueue = new LinkedList<>();
        Queue<int[]> aQueue = new LinkedList<>();
        
        for(int i=0;i< row;i++) {
            pQueue.offer(new int[]{i,0});
            aQueue.offer(new int[]{i, col-1});
        }
        
        for(int i=0;i< col;i++) {
            pQueue.offer(new int[]{0,i});
            aQueue.offer(new int[]{row-1, i});
        }
        
        //perform BFS
        boolean[][] pReachable = bfs(pQueue);
        boolean[][] aReachable = bfs(aQueue);
        
        //find common
        List<List<Integer>> common = new ArrayList<>();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++) {
                if(pReachable[i][j] && aReachable[i][j]) {
                    common.add(List.of(i,j));
                }
            }
        }
        return common;
    }
    
    public boolean[][] bfs(Queue<int[]> queue){
        boolean[][] reachable = new boolean[row][col];
        while(!queue.isEmpty()) {
            int[] cell = queue.poll();
            //mark this cell
            reachable[cell[0]][cell[1]] = true;
            
            //directions
            for(int[] dir : directions) {
                int newRow = cell[0]+dir[0];
                int newCol = cell[1]+dir[1];
                //check if valid cell
                if(newRow < 0 || newRow >= row || newCol <0 || newCol >= col) {
                    continue;
                }
                //check if already visited
                if(reachable[newRow][newCol]) {
                    continue;
                }
                
                if(land[newRow][newCol] < land[cell[0]][cell[1]]) {
                    continue;
                }
                queue.offer(new int[]{newRow, newCol});
            }
                
        }
        return reachable;
        
    }
    
}